# Importando as bibliotecas necessárias
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

# modelo de Regressão Logística
class ModeloRegressaoLogistica:
    # Método de inicialização da classe
    def __init__(self):
        self.df = None  # DataFrame 
        self.model = None  # A instância do modelo de Regressão Logística
        # Atributos dos conjuntos de treino e teste
        self.X_train, self.X_test, self.y_train, self.y_test = None, None, None, None

    # Método para carregar o dataset
    def CarregarDataset(self, path):
        # Definindo os nomes das colunas 
        names = ['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm', 'Species']
        # Lendo o arquivo CSV 
        self.df = pd.read_csv(path, names=names)

    # Método para tratar os dados
    def TratamentoDeDados(self):
        # Removendo valores ausentes (
        self.df.dropna(inplace=True)
        
        # as variáveis independentes (X) e a variável dependente (y)
  
        X = self.df.drop(columns='Species')  # Remove a coluna 'Species' 
        y = self.df['Species']  # A variável 'Species'
        
        #  conjunto de treino e conjunto de teste 
        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(X, y, test_size=0.2, random_state=42)
      

    #  modelo de Regressão Logística
    def Treinamento(self):
        # 
        print("Treinando com o modelo de Regressão Logística...")
        self.model = LogisticRegression(max_iter=200, random_state=42)  # iterações do algoritmo
        self.model.fit(self.X_train, self.y_train)  # Treinando o modelo 

    # Método de Teste
    def Teste(self):
        # As previsões do modelo treinado
        y_pred = self.model.predict(self.X_test)
        
        # Calculando a acurácia do modelo
        acertos = sum(y_pred == self.y_test)  #Os acertos
        total = len(self.y_test)  # o  conjunto de teste
        acuracia = (acertos / total) * 100  # Calculando a acurácia e
        # Exibindo as previsões do modelo 
        print("Previsões do modelo de Regressão Logística:", y_pred[:5])
        print("Valores reais:", self.y_test[:5].values)
        print(f"Acurácia do modelo de Regressão Logística: {acuracia:.2f}%")


        
caminho_dataset = '/content/iris.csv'

    # Executando o modelo de Regressão Logística 
    def Executar(self, path):
       
        self.CarregarDataset(path)
        self.TratamentoDeDados()
        self.Treinamento()
        self.Teste()
        print("\nFinalizando execução do modelo de Regressão Logística.")


#Teste
Acurácia do modelo de Regressão Logística: 97.50%
